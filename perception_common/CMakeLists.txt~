cmake_minimum_required(VERSION 2.8.3)
project(perception_common)
set (CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/drc/wrecs_common/CMake")

include(cotire)
SET(CMAKE_BUILD_TYPE RelWithDebInfo)

set(CMAKE_CXX_FLAGS "-std=c++0x -g -march=native -mno-avx -Werror ${CMAKE_CXX_FLAGS}")

IF(NOT GAZEBO_SIMULATION)
  SET(GAZEBO_SIMULATION ON)
ENDIF()

IF(GAZEBO_SIMULATION)
     string(ASCII 27 Esc)
     set(BoldGreen   "${Esc}[1;32m")
     set(ColourReset "${Esc}[m")
     message("${BoldGreen}Compiling ${PROJECT_NAME} with support for drcsim${ColourReset}")
ENDIF()

find_package(OpenCV 2.4 REQUIRED core gpu imgproc calib3d highgui)
find_package(PCL 1.7 REQUIRED io)
find_package(catkin REQUIRED COMPONENTS roscpp
                                        rospy
                                        geometry_msgs
                                        sensor_msgs
                                        geometric_shapes
					cv_bridge
					image_transport
					pcl_conversions
                                        pcl_ros
					std_msgs
					wrecs_msgs
					message_filters
					multisense_ros
					visiontools
					wrecs_common
					tf_conversions)

include_directories(include)
include_directories(SYSTEM ${PCL_INCLUDE_DIRS} ${OpenCV_INCLUDE_DIRS} ${catkin_INCLUDE_DIRS})

link_directories(${PCL_LIBRARY_DIRS})
add_definitions(${PCL_DEFINITIONS})

catkin_package(
   INCLUDE_DIRS include
   LIBRARIES ${PROJECT_NAME}
   CATKIN_DEPENDS roscpp cv_bridge image_transport pcl_conversions std_msgs message_filters multisense_ros wrecs_common
   DEPENDS opencv pcl
)

#build for non simulation environment
   
add_library(${PROJECT_NAME} src/MultisensePointCloud.cpp
			    src/MultisenseImage.cpp
			    src/ImageHelper.cpp
			    src/PointCloudHelper.cpp
			    src/MultisenseControl.cpp
                            src/SampleCADModels.cpp
                            src/MultisenseBackend.cpp)
										   
target_link_libraries(${PROJECT_NAME} ${PCL_LIBRARIES} ${catkin_LIBRARIES} )
##cotire(${PROJECT_NAME})
add_dependencies(${PROJECT_NAME} ${catkin_EXPORTED_TARGETS})


add_executable(test_lasercloud src/test_laser.cpp)
target_link_libraries(test_lasercloud ${PROJECT_NAME})
##cotire(test_lasercloud)

add_executable(test_image src/test_image.cpp)
target_link_libraries(test_image ${PROJECT_NAME})
##cotire(test_image)

add_executable(test_control src/test_MultisenseControl.cpp)
target_link_libraries(test_control ${PROJECT_NAME})
##cotire(test_control)

add_executable(test_organizedcloud src/test_organizedRGBD.cpp)
target_link_libraries(test_organizedcloud ${PROJECT_NAME})
##cotire(test_organizedcloud)

#build for simulation environment
IF(GAZEBO_SIMULATION)
add_library(${PROJECT_NAME}_drcsim  src/MultisensePointCloud.cpp
				    src/MultisenseImage.cpp
				    src/ImageHelper.cpp
				    src/PointCloudHelper.cpp
				    src/MultisenseControl.cpp)
									

set_property(
   		TARGET ${PROJECT_NAME}_drcsim 
   		PROPERTY COMPILE_DEFINITIONS GAZEBO_SIMULATION)

target_link_libraries(${PROJECT_NAME}_drcsim  ${PCL_LIBRARIES} ${catkin_LIBRARIES})
add_dependencies(${PROJECT_NAME}_drcsim  ${catkin_EXPORTED_TARGETS})
##cotire(${PROJECT_NAME}_drcsim)

add_executable(test_lasercloud_drcsim src/test_laser.cpp)
target_link_libraries(test_lasercloud_drcsim ${PROJECT_NAME}_drcsim)
##cotire(test_lasercloud_drcsim)

add_executable(test_image_drcsim src/test_image.cpp)
target_link_libraries(test_image_drcsim ${PROJECT_NAME}_drcsim)
##cotire(test_image_drcsim )

add_executable(multisense_backend src/MultisenseBackend.cpp)
target_link_libraries(multisense_backend ${PROJECT_NAME})

add_executable(test_control_drcsim src/test_MultisenseControl.cpp)
target_link_libraries(test_control_drcsim ${PROJECT_NAME}_drcsim)
##cotire(test_control_drcsim)

add_executable(test_sample_cad_models src/test_sample_cad_models.cpp)
target_link_libraries(test_sample_cad_models ${PROJECT_NAME})
##cotire(test_sample_cad_models)

add_executable(test_organizedcloud_drcsim src/test_organizedRGBD.cpp)
target_link_libraries(test_organizedcloud_drcsim ${PROJECT_NAME}_drcsim)
##cotire(test_organizedcloud_drcsim)

ENDIF()

## Mark executables and/or libraries for installation
install(TARGETS ${PROJECT_NAME} multisense_backend
   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

## Mark cpp header files for installation
install(DIRECTORY include/${PROJECT_NAME}/
   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
   FILES_MATCHING PATTERN "*.h"
   PATTERN ".svn" EXCLUDE
)

install(DIRECTORY launch/
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}/launch
  PATTERN ".svn" EXCLUDE)
